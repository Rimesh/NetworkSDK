// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios17.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NetworkSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import Foundation
@_exported import NetworkSDK
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol NetworkManagerProtocol : AnyObject {
  var decoder: Foundation.JSONDecoder { get set }
  func get<T>(type: T.Type, endPoint: NetworkSDK.Endpoint) -> Combine.AnyPublisher<T, NetworkSDK.NetworkError> where T : Swift.Decodable
  func patch(endPoint: NetworkSDK.Endpoint) -> Combine.AnyPublisher<Swift.Bool, NetworkSDK.NetworkError>
  func patch<T>(type: T.Type, endPoint: NetworkSDK.Endpoint) -> Combine.AnyPublisher<T, NetworkSDK.NetworkError> where T : Swift.Decodable
  func post(endPoint: NetworkSDK.Endpoint) -> Combine.AnyPublisher<Swift.Bool, NetworkSDK.NetworkError>
  func post<T>(type: T.Type, endPoint: NetworkSDK.Endpoint) -> Combine.AnyPublisher<T, NetworkSDK.NetworkError> where T : Swift.Decodable
  func delete(endPoint: NetworkSDK.Endpoint) -> Combine.AnyPublisher<Swift.Bool, NetworkSDK.NetworkError>
}
public class NetworkManager : NetworkSDK.NetworkManagerProtocol {
  public init(configuration: NetworkSDK.NetworkConfiguration)
  public var decoder: Foundation.JSONDecoder
  public func get<T>(type: T.Type, endPoint: NetworkSDK.Endpoint) -> Combine.AnyPublisher<T, NetworkSDK.NetworkError> where T : Swift.Decodable
  public func patch(endPoint: NetworkSDK.Endpoint) -> Combine.AnyPublisher<Swift.Bool, NetworkSDK.NetworkError>
  public func patch<T>(type: T.Type, endPoint: NetworkSDK.Endpoint) -> Combine.AnyPublisher<T, NetworkSDK.NetworkError> where T : Swift.Decodable
  public func post(endPoint: NetworkSDK.Endpoint) -> Combine.AnyPublisher<Swift.Bool, NetworkSDK.NetworkError>
  public func post<T>(type: T.Type, endPoint: NetworkSDK.Endpoint) -> Combine.AnyPublisher<T, NetworkSDK.NetworkError> where T : Swift.Decodable
  public func delete(endPoint: NetworkSDK.Endpoint) -> Combine.AnyPublisher<Swift.Bool, NetworkSDK.NetworkError>
  @objc deinit
}
extension Combine.Publisher where Self.Output == (data: Foundation.Data, response: Foundation.URLResponse) {
  public func assumeHTTP() -> Combine.AnyPublisher<(data: Foundation.Data, response: Foundation.HTTPURLResponse), NetworkSDK.NetworkError>
}
extension Combine.Publisher where Self.Failure == NetworkSDK.NetworkError, Self.Output == (data: Foundation.Data, response: Foundation.HTTPURLResponse) {
  public func responseData() -> Combine.AnyPublisher<Foundation.Data, NetworkSDK.NetworkError>
}
extension Combine.Publisher where Self.Failure == NetworkSDK.NetworkError, Self.Output == Foundation.Data {
  public func decoding<Item, Coder>(type: Item.Type, decoder: Coder) -> Combine.AnyPublisher<Item, NetworkSDK.NetworkError> where Item : Swift.Decodable, Coder : Combine.TopLevelDecoder, Coder.Input == Foundation.Data
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  case put
  case patch
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Endpoint {
  public init(path: Swift.String, method: NetworkSDK.HTTPMethod, authorization: NetworkSDK.AuthorizationType, queryItems: [Foundation.URLQueryItem], bodyParams: [Swift.String : Swift.String] = [:], headers: [Swift.String : Swift.String] = [:])
}
public struct NetworkConfiguration {
  public let baseURL: Swift.String
  public let apiKey: Swift.String?
  public let bearerToken: Swift.String?
  public init(baseURL: Swift.String, apiKey: Swift.String? = nil, bearerToken: Swift.String? = nil)
}
public enum AuthorizationType {
  case none
  case apiKey
  case bearerToken
  public static func == (a: NetworkSDK.AuthorizationType, b: NetworkSDK.AuthorizationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum NetworkError : Swift.Error {
  case nonHTTPResponse
  case tokenExpired
  case requestTimeOut
  case requestFailed(Swift.Int)
  case serverError(code: Swift.Int, data: Foundation.Data)
  case networkError(any Swift.Error)
  case decodingError(Swift.DecodingError)
  case unableToProcess(Foundation.Data)
}
extension NetworkSDK.HTTPMethod : Swift.Equatable {}
extension NetworkSDK.HTTPMethod : Swift.Hashable {}
extension NetworkSDK.HTTPMethod : Swift.RawRepresentable {}
extension NetworkSDK.AuthorizationType : Swift.Equatable {}
extension NetworkSDK.AuthorizationType : Swift.Hashable {}
